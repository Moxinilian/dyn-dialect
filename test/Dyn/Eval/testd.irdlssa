// RUN: dyn-opt %s | dyn-opt | FileCheck %s

module {
  // CHECK-LABEL: irdlssa.dialect testd {
  irdlssa.dialect testd {
    // CHECK-LABEL: irdlssa.type parametric {
    irdlssa.type parametric {
      %0 = irdlssa.any_type
      irdlssa.parameters(%0)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %1 = irdleval.alloca
        irdleval.assign(%1, %arg0)
        irdleval.success
      }
    }
    // CHECK-LABEL: irdlssa.operation eq {
    irdlssa.operation eq {
      %0 = irdlssa.is_type : i32
      irdlssa.results(%0)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %1 = irdleval.alloca
        irdleval.check_type(%arg0, i32, ^bb1, ^bb2)
      ^bb1:  // pred: ^bb0
        irdleval.success
      ^bb2:  // pred: ^bb0
        irdleval.failure
      }
    }
    // CHECK-LABEL: irdlssa.operation eq_param {
    irdlssa.operation eq_param {
      %0 = irdlssa.is_type : "testd.parametric"<i32>
      irdlssa.results(%0)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %1 = irdleval.alloca
        irdleval.check_type(%arg0, "testd.parametric"<i32>, ^bb1, ^bb2)
      ^bb1:  // pred: ^bb0
        irdleval.success
      ^bb2:  // pred: ^bb0
        irdleval.failure
      }
    }
    // CHECK-LABEL: irdlssa.operation anyof {
    irdlssa.operation anyof {
      %0 = irdlssa.is_type : i32
      %1 = irdlssa.is_type : i64
      %2 = irdlssa.any_of(%0, %1)
      irdlssa.results(%2)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %3 = irdleval.alloca
        %4 = irdleval.alloca
        %5 = irdleval.alloca
        irdleval.assign(%5, %arg0)
        irdleval.check_type(%arg0, i32, ^bb1, ^bb2)
      ^bb1:  // 2 preds: ^bb0, ^bb2
        irdleval.success
      ^bb2:  // pred: ^bb0
        irdleval.check_type(%arg0, i64, ^bb1, ^bb3)
      ^bb3:  // pred: ^bb2
        irdleval.clear(%5)
        irdleval.failure
      }
    }
    // CHECK-LABEL: irdlssa.operation any {
    irdlssa.operation any {
      %0 = irdlssa.any_type
      irdlssa.results(%0)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %1 = irdleval.alloca
        irdleval.assign(%1, %arg0)
        irdleval.success
      }
    }
    // CHECK-LABEL: irdlssa.operation dynbase {
    irdlssa.operation dynbase {
      %0 = irdlssa.any_type
      %1 = irdlssa.parametric_type : "testd.parametric"<%0>
      irdlssa.results(%1)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %2 = irdleval.alloca
        %3 = irdleval.alloca
        irdleval.check_parametric(%arg0, "testd.parametric", ^bb2, ^bb1)
      ^bb1:  // pred: ^bb0
        irdleval.failure
      ^bb2(%4: !irdleval.eval_type):  // pred: ^bb0
        irdleval.assign(%3, %arg0)
        irdleval.assign(%2, %4)
        irdleval.success
      }
    }
    // CHECK-LABEL: irdlssa.operation dynparams {
    irdlssa.operation dynparams {
      %0 = irdlssa.is_type : i32
      %1 = irdlssa.is_type : i64
      %2 = irdlssa.any_of(%0, %1)
      %3 = irdlssa.parametric_type : "testd.parametric"<%2>
      irdlssa.results(%3)
      // CHECK: irdleval.verifier {
      // CHECK: ^[[bb0:[^\(]*]](%[[arg0:[^:]*]]: !irdleval.eval_type):
      // CHECK:   %[[v4:[^ ]*]] = irdleval.alloca
      // CHECK:   %[[v5:[^ ]*]] = irdleval.alloca
      // CHECK:   %[[v6:[^ ]*]] = irdleval.alloca
      // CHECK:   %[[v7:[^ ]*]] = irdleval.alloca
      // CHECK:   irdleval.check_parametric(%[[arg0]], "testd.parametric", ^[[bb4:[^,]*]], ^[[bb3:[^,]*]])
      // CHECK: ^[[bb1:[^:]*]]:  // 2 preds: ^[[bb4]], ^[[bb5:.*]]
      // CHECK:   irdleval.success
      // CHECK: ^[[bb2:[^:]*]]:  // 2 preds: ^[[bb3]], ^[[bb6:[^:]*]]
      // CHECK:   irdleval.failure
      // CHECK: ^[[bb3]]:  // pred: ^[[bb0]]
      // CHECK:   cf.br ^[[bb2]]
      // CHECK: ^[[bb4]](%[[v8:[^:]*]]: !irdleval.eval_type):  // pred: ^[[bb0]]
      // CHECK:   irdleval.assign(%[[v7]], %[[arg0]])
      // CHECK:   irdleval.assign(%[[v6]], %[[v8]])
      // CHECK:   irdleval.check_type(%[[v8]], i32, ^[[bb1]], ^[[bb5]])
      // CHECK: ^[[bb5]]:  // pred: ^[[bb4]]
      // CHECK:   irdleval.check_type(%[[v8]], i64, ^[[bb1]], ^[[bb6]])
      // CHECK: ^[[bb6]]:  // pred: ^[[bb5]]
      // CHECK:   irdleval.clear(%[[v7]])
      // CHECK:   irdleval.clear(%[[v6]])
      // CHECK:   cf.br ^[[bb2]]
      // CHECK: }
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %4 = irdleval.alloca
        %5 = irdleval.alloca
        %6 = irdleval.alloca
        %7 = irdleval.alloca
        irdleval.check_parametric(%arg0, "testd.parametric", ^bb4, ^bb3)
      ^bb1:  // 2 preds: ^bb4, ^bb5
        irdleval.success
      ^bb2:  // 2 preds: ^bb3, ^bb6
        irdleval.failure
      ^bb3:  // pred: ^bb0
        cf.br ^bb2
      ^bb4(%8: !irdleval.eval_type):  // pred: ^bb0
        irdleval.assign(%7, %arg0)
        irdleval.assign(%6, %8)
        irdleval.check_type(%8, i32, ^bb1, ^bb5)
      ^bb5:  // pred: ^bb4
        irdleval.check_type(%8, i64, ^bb1, ^bb6)
      ^bb6:  // pred: ^bb5
        irdleval.clear(%7)
        irdleval.clear(%6)
        cf.br ^bb2
      }
    }
    // CHECK-LABEL: irdlssa.operation params {
    irdlssa.operation params {
      %0 = irdlssa.is_type : i32
      %1 = irdlssa.is_type : i64
      %2 = irdlssa.any_of(%0, %1)
      %3 = irdlssa.parametric_type : "std.complex"<%2>
      irdlssa.results(%3)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type):
        %4 = irdleval.alloca
        %5 = irdleval.alloca
        %6 = irdleval.alloca
        %7 = irdleval.alloca
        irdleval.check_parametric(%arg0, "std.complex", ^bb4, ^bb3)
      ^bb1:  // 2 preds: ^bb4, ^bb5
        irdleval.success
      ^bb2:  // 2 preds: ^bb3, ^bb6
        irdleval.failure
      ^bb3:  // pred: ^bb0
        cf.br ^bb2
      ^bb4(%8: !irdleval.eval_type):  // pred: ^bb0
        irdleval.assign(%7, %arg0)
        irdleval.assign(%6, %8)
        irdleval.check_type(%8, i32, ^bb1, ^bb5)
      ^bb5:  // pred: ^bb4
        irdleval.check_type(%8, i64, ^bb1, ^bb6)
      ^bb6:  // pred: ^bb5
        irdleval.clear(%7)
        irdleval.clear(%6)
        cf.br ^bb2
      }
    }
    // CHECK-LABEL: irdlssa.operation constraint_vars {
    irdlssa.operation constraint_vars {
      %0 = irdlssa.is_type : i32
      %1 = irdlssa.is_type : i64
      %2 = irdlssa.any_of(%0, %1)
      irdlssa.results(%2, %2)
      irdleval.verifier {
      ^bb0(%arg0: !irdleval.eval_type, %arg1: !irdleval.eval_type):
        %3 = irdleval.alloca
        %4 = irdleval.alloca
        %5 = irdleval.alloca
        irdleval.assign(%5, %arg0)
        irdleval.check_type(%arg0, i32, ^bb2, ^bb4)
      ^bb1:  // 2 preds: ^bb2, ^bb3
        irdleval.success
      ^bb2:  // pred: ^bb0
        irdleval.match_type(%5, %arg1, ^bb1, ^bb4)
      ^bb3:  // pred: ^bb4
        irdleval.match_type(%5, %arg1, ^bb1, ^bb5)
      ^bb4:  // 2 preds: ^bb0, ^bb2
        irdleval.check_type(%arg0, i64, ^bb3, ^bb5)
      ^bb5:  // 2 preds: ^bb3, ^bb4
        irdleval.clear(%5)
        irdleval.failure
      }
    }
  }
}
